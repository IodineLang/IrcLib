use net.ssl;
use net.socket;
use inspect;
use EventEmitter from events;


func __parseIrcMessage (msg) {
    prefix = "";
    command = "";
    params = [];
    trailing = "";
        
    if (msg.startswith (":")) {
        prefix = msg.substr (1, msg.index (" "));
        msg = msg.substr (msg.index (" ") + 1).trim ();
    }
    
    func parseCommand () {
        accum = StringBuffer ();
        i = 0;
        while (msg[i].isalnum ()) {
            accum.append (msg[i]);
            i += 1
        }
        msg = msg.substr (i).trim ();
        return Str (accum);
    }
    
    command = parseCommand ();
    
    if (msg.startswith (":")) {
        trailing = msg.substr (1);
    } else if (msg.contains (":")) {
        params = msg.substr (0, msg.index (":")).split (' ');
        trailing = msg.substr (msg.index (':') + 1);
    } else {
        params = msg.split (' ');
    }
       
    retTuple = (prefix, command, params, middle, trailing);
    
    # HACK Until I implement NamedTuple class
   
    inspect.setattribute (retTuple, "prefix", prefix);
    inspect.setattribute (retTuple, "command", command);
    inspect.setattribute (retTuple, "params", params);
    inspect.setattribute (retTuple, "trailing", trailing);
    
    if (prefix.contains ("!")) {
        retTuple.nick = prefix.substr (0, prefix.index ("!"));
        prefix = prefix.substr (prefix.index ("!") + 1);
        if (prefix.contains ("@")) {
            retTuple.user = prefix.substr (0, prefix.index ("@"));
            retTuple.host = prefix.substr (prefix.index ("@") + 1);
        } else {
            retTuple.user = prefix;
            retTuple.host = "";
        }
        retTuple.server = "";
    } else {
        retTuple.server = prefix;
    }

    return retTuple;
    
}

class IrcClient extends EventEmitter {
    
    func IrcClient (self) {
        self.sock = socket.socket (socket.SOCK_STREAM, socket.PROTO_TCP);
        self.nick = "IrcClient";
        self.hostname = "IrcClient";
        self.servername = "IrcClient";
        self.realname = "IrcClient";
    }

    func connect (self, ip, port = 6667, useSsl = false) {
    
        self.ipAddress = ip;
        self.port = port;
        self.sock.connect (self.ipAddress, self.port);
        self.stream = self.sock.getstream ();
        
        if (useSsl) {
            self.stream = ssl.wrapstream (self.stream);
        }
        
        self._connectionMade ();
        self._initiateConnection ();

        self._messageLoop ();
    }

    func _initiateConnection (self) {
        self.sendRaw ("USER {} {} {} :{}", self.nick, 
            self.hostname,
            self.servername,
            self.realname
        );
            
        self.sendRaw ("NICK {}", self.nick);
    }
    
    func _messageLoop (self) {
        while (true) {
            line = self.stream.readln ().trim ();
            if (len (line) > 0) {
                self._handleRequest (line);
            }
        }
    }
    
    func _handleRequest (self, rawMsg) {        
        msg = __parseIrcMessage (rawMsg);
              
        given (msg.command) {
        
            when "PING" {
                self.sendRaw ("PONG :{}", msg.trailing);            
            }
            
            when "PRIVMSG" {
                self._privmsg (msg.params[0], msg.nick, msg.trailing);
            }
            
            when "JOIN" {
                if (self.nick == msg.nick) {
                    self._joined (msg.trailing);
                } else {
                    self._userJoined (msg.trailing, msg.nick);
                }
            }
            
            when "PART" {
                if (self.nick == msg.nick) {
                    self._parted (msg.params[0], msg.trailing);
                } else {
                    self._userParted (msg.params[0], msg.nick, msg.trailing);
                }
            }
            
            when "QUIT" {
                self._userQuit (msg.nick, msg.trailing);
            }
            
            when "KICK" {
                if (msg.params [1] == self.nick) {
                    self._kicked (msg.params [0], msg.nick, msg.trailing);
                } else {
                    self._userKicked (msg.params [0], msg.nick, msg.params [1], msg.trailing);
                }
            }
        }
    }
    
    func sendRaw (self, format, *args) {
        self.stream.write (format.format (*args) + "\r\n");
    }
    
    func say (self, channel, msg) {
        if (channel != self.nick) {
            self.sendRaw ("PRIVMSG {} :{}", channel, msg);
        }
    }

    func join (self, channel) {
        self.sendRaw ("JOIN {}", channel);
    }

    func part (self, channel) {
        self.sendRaw ("PART {}", channel);
    }
    
    func connectionMade (self) { }
    func privmsg (self, sender, channel, command) { }
    func joined (self, channel) { }
    func parted (self, channel, reason) { }
    func userJoined (self, user, channel) { }
    func userParted (self, user, channel, reason) { }
    func userQuit (self, user, reason) { }
    func kicked (self, kicker, channel, reason) { }
    func userKicked (self, kicker, kickee, channel, reason) { }
    
    func _connectionMade (self) {
        self.connectionMade ();
        self.emit ("connectionMade", self);
    }
    
    func _privmsg (self, channel, sender, command) {
        self.privmsg (channel, sender, command);
        self.emit ("privmsg", self, channel, sender, command);
    }
    
    func _joined (self, channel) {
        self.joined (channel);
        self.emit ("joined", self, channel);
    }
    
    func _parted (self, channel, reason) {
        self.parted (channel, reason);
        self.emit ("parted", self, channel, reason);
    }
    
    func _userJoined (self, user, channel) {
        self.userJoined (user, channel);
        self.emit ("userJoined", self, user, channel);
    }
    
    func _userParted (self, channel, nick, reason) {
        self.userParted (channel, nick, reason);
        self.emit ("userParted", self, channel, nick, reason);
    }
    
    func _userQuit (self, user, reason) {
        self.userQuit (user, reason);
        self.emit ("userQuit", self, user, reason);
    }
    
    func _kicked (self, channel, kicker, reason) {
        self.kicked (channel, kicker, reason);
        self.emit ("kicked", channel, kicker, reason);
    }
    
    func _userKicked (self, channel, kicker, kickee, reason) {
        self.userKicked (channel, kicker, kickee, reason);
        self.emit ("userKicked", self, channel, kicker, kickee, reason);
    }
}
